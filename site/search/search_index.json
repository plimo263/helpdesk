{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Seja bem-vindo !!!","text":"<p>Esta documenta\u00e7\u00e3o foi criada para auxiliar o DEV que desejar se envolver no projeto, com melhorias para este Helpdesk.</p> <p>Este \u00e9 um projeto de c\u00f3digo aberto desenvolvido por Marcos Felipe (vulgo @plimo263).</p> <p>Voc\u00ea como desenvolvedor, pode contribuir para o crescimento deste projeto propondo melhorias com abertura de issues e/ou realizando pull requests mostrando os problemas e qual a sugest\u00e3o para resolve-los.</p>"},{"location":"#qual-o-objetivo-do-projeto","title":"Qual o objetivo do projeto ? \ud83e\udd14","text":"<p>Se voc\u00ea trabalha com TI sabe como \u00e9 dificil gerenciar demandas de usu\u00e1rios, ainda mais para voc\u00ea que \u00e9 suporte e precisa controlar multiplas solicita\u00e7\u00f5es de usu\u00e1rios informando que o sistema n\u00e3o funciona, que a internet caiu, solicita\u00e7\u00e3o de equipamentos de inform\u00e1tica, consertar o AR CONDICIONADO (sim, isso j\u00e1 ocorreu comigo \ud83d\ude2c), enfim, muitas s\u00e3o as demandas e lembrar de todas se torna praticamente imposs\u00edvel.</p> <p>O principal objetivo deste projeto \u00e9 disponibilizar uma interface WEB (e quem sabe no futuro Mobile \ud83d\ude0e) para controles das solicita\u00e7\u00f5es que s\u00e3o abertas a equipe de TI.</p> <p>Com cadastros de usu\u00e1rios, setores, registro de chamados e at\u00e9 envio de E-mails a cada intera\u00e7\u00e3o do chamado voc\u00ea pode organizar e controlar a \u00e1rea de TI com melhor gerenciamento.</p> <p>A instala\u00e7\u00e3o deste sistema \u00e9 simples e basta ter conhecimentos b\u00e1sicos sobre instanciar um servidor WEB e disponibiliza-lo na REDE. Espero que gostem do sistema e explorem os manuais de utiliza\u00e7\u00e3o, gerenciamento e desenvolvimento (caso seja um DEV \ud83e\udd13).</p> <p>Obrigado por utilizar o sistema e se puder me dar uma estrela no Github \u2b50 fico muito agradecido \ud83e\udd70.</p> <p>Marcos Felipe da Silva @plimo263</p>"},{"location":"models/config/config/","title":"Class Config","text":""},{"location":"models/config/config/#helpdesk.models.Config.config_exists","title":"config_exists","text":"<pre><code>config_exists(**kwargs) -&gt; bool\n</code></pre> <p>Verifica se a configura\u00e7\u00e3o existe baseado no parametro.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <p>Consulta baseado no id</p> required <code>name</code> <p>Consulta baseado no nome da configuracao</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; c = Config()\n&gt;&gt;&gt; c.config_exists(id=1)\nTrue\n</code></pre>"},{"location":"models/config/config/#helpdesk.models.Config.delete","title":"delete","text":"<pre><code>delete(id: int)\n</code></pre> <p>Exclui uma configura\u00e7\u00e3o recebendo o seu ID de identifica\u00e7\u00e3o, uma exception pode ser lan\u00e7ada  caso o DB n\u00e3o aceite algum parametro enviado.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Um inteiro que identifica o item a ser excluido</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; c = Config()\n&gt;&gt;&gt; c.delete(1)\n</code></pre>"},{"location":"models/config/config/#helpdesk.models.Config.get","title":"get","text":"<pre><code>get(**kwargs) -&gt; ConfigData\n</code></pre> <p>Recupera uma configura\u00e7\u00e3o baseado em um parametro nomeado enviado. Caso  n\u00e3o seja encontrada a config uma Exception ValueError ser\u00e1 lan\u00e7ada.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <p>O nome da configura\u00e7\u00e3o</p> required <code>id</code> <p>O identificador da configura\u00e7\u00e3o.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; c = Config()\n&gt;&gt;&gt; c.get(id=1)\nConfigData(id=1, name='TESTE', value='2', description='UMA DESCRICAO')\n</code></pre>"},{"location":"models/config/config/#helpdesk.models.Config.get_all","title":"get_all","text":"<pre><code>get_all() -&gt; Dict[str, ConfigData]\n</code></pre> <p>Retorna todas as configs existentes no sistema como um Dicionario de configs.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; c = Config()\n&gt;&gt;&gt; c.get_all()\n{'TESTE': ConfigData(id=1, name='TESTE', value='2', description='UMA DESCRICAO')}\n</code></pre>"},{"location":"models/config/config/#helpdesk.models.Config.save","title":"save","text":"<pre><code>save(config: ConfigData) -&gt; ConfigData\n</code></pre> <p>Cria uma nova configura\u00e7\u00e3o no sistema, caso o nome da configura\u00e7\u00e3o j\u00e1  exista uma Exception (ValueError) \u00e9 lan\u00e7ada.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ConfigData</code> <p>Um objeto de configura\u00e7\u00e3o para cria\u00e7\u00e3o de uma nova config.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; c = Config()\n&gt;&gt;&gt; c_data = ConfigData(name='TESTE', value='1', description='UMA DESCRICAO')\n&gt;&gt;&gt; c.save(c_data)\nConfigData(id=1, name='TESTE', value='1', description='UMA DESCRICAO')\n</code></pre>"},{"location":"models/config/config/#helpdesk.models.Config.update","title":"update","text":"<pre><code>update(config: ConfigData) -&gt; ConfigData\n</code></pre> <p>Atualiza uma configura\u00e7\u00e3o j\u00e1 existente, uma exception pode ser lan\u00e7ada  caso o DB n\u00e3o aceite algum parametro enviado.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ConfigData</code> <p>Um objeto de configura\u00e7\u00e3o para atualiza\u00e7\u00e3o de uma config existente.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; c = Config()\n&gt;&gt;&gt; c_data = c.get(1)\n&gt;&gt;&gt; c_data.value = '2'\n&gt;&gt;&gt; c.update(c_data)\nConfigData(id=1, name='TESTE', value='2', description='UMA DESCRICAO')\n</code></pre>"},{"location":"models/config/config_data/","title":"Class ConfigData","text":""},{"location":"models/config/config_data/#helpdesk.models.config.config_data.ConfigData.from_db","title":"from_db  <code>staticmethod</code>","text":"<pre><code>from_db(data_db: ConfigTable)\n</code></pre> <p>Cria um objeto ConfigData baseado nos campos de um  objeto configTable.</p> <p>Parameters:</p> Name Type Description Default <code>data_db</code> <code>ConfigTable</code> <p>Uma instancia de um ORM ConfigTable para carregar um objeto ConfigData</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt;&gt; c = ConfigTable.query.get(1)\n&gt;&gt;&gt;&gt; c_data = ConfigData.from_db(c)\n</code></pre>"},{"location":"models/config/config_data/#helpdesk.models.config.config_data.ConfigData.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; Dict\n</code></pre> <p>Retorna uma representa\u00e7\u00e3o de um dicionario do objeto ConfigData.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; c_data = ConfigData(id=1, name='NOVO_RECURSO', value='12', description='Recurso totalmente novo no sistema')\n</code></pre>"},{"location":"models/config/config_db/","title":"Class ConfigDB","text":"<p>Classe para lidar com opera\u00e7\u00f5es baseadas no banco de dados.</p>"},{"location":"models/config/config_db/#helpdesk.models.config.config_db.ConfigDB.__up_insert_db","title":"__up_insert_db","text":"<pre><code>__up_insert_db(data_db: ConfigTable) -&gt; ConfigTable\n</code></pre> <p>Atualiza/Insere registros no banco de dados</p> <p>Parameters:</p> Name Type Description Default <code>data_db</code> <code>ConfigTable</code> <p>Uma instancia de um ORM ConfigTable que deve ser adicionado/atualizado no banco de dados.</p> required"},{"location":"models/config/config_db/#helpdesk.models.config.config_db.ConfigDB.config_exists","title":"config_exists","text":"<pre><code>config_exists(**kwargs) -&gt; bool\n</code></pre> <p>Verifica se a configura\u00e7\u00e3o existe baseado no parametro.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <p>Consulta baseado no id</p> required <code>name</code> <p>Consulta baseado no nome da configura\u00e7\u00e3o</p> required"},{"location":"models/config/config_db/#helpdesk.models.config.config_db.ConfigDB.delete","title":"delete","text":"<pre><code>delete(id: int)\n</code></pre> <p>Exclui uma configura\u00e7\u00e3o recebendo o seu ID de identifica\u00e7\u00e3o,  uma exception pode ser lan\u00e7ada caso o DB n\u00e3o aceite algum parametro enviado.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Um inteiro que identifica o item a ser excluido</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; c = ConfigDB()\n&gt;&gt;&gt; c.delete(1)\n</code></pre>"},{"location":"models/config/config_db/#helpdesk.models.config.config_db.ConfigDB.get","title":"get","text":"<pre><code>get(**kwargs) -&gt; ConfigTable\n</code></pre> <p>Recupera um registro de configura\u00e7\u00e3o baseado em um parametro nomeado enviado. Caso  n\u00e3o seja encontrada a config uma Exception ValueError ser\u00e1 lan\u00e7ada.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <p>O nome da configura\u00e7\u00e3o</p> required <code>id</code> <p>O identificador da configura\u00e7\u00e3o.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; c = ConfigDB()\n&gt;&gt;&gt; c.get(id=1)\nConfigTable\n</code></pre>"},{"location":"models/config/config_db/#helpdesk.models.config.config_db.ConfigDB.get_all","title":"get_all","text":"<pre><code>get_all() -&gt; List[ConfigTable]\n</code></pre> <p>Retorna todos os registros existentes no sistema do configTable.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; c = ConfigDB()\n&gt;&gt;&gt; c.get_all()\n[ConfigTable, ConfigTable]\n</code></pre>"},{"location":"models/config/config_db/#helpdesk.models.config.config_db.ConfigDB.save","title":"save","text":"<pre><code>save(config: ConfigData) -&gt; ConfigTable\n</code></pre> <p>Salva a config no banco de dados, caso o nome exista ou algum erro  no banco uma Exception \u00e9 lan\u00e7ada.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ConfigData</code> <p>Um objeto de configura\u00e7\u00e3o para cria\u00e7\u00e3o de uma nova config.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; c = ConfigDB()\n&gt;&gt;&gt; c_data = ConfigData(name='TESTE', value='1', description='UMA DESCRICAO')\n&gt;&gt;&gt; c.save(c_data)\nConfigTable\n</code></pre>"},{"location":"models/config/config_db/#helpdesk.models.config.config_db.ConfigDB.update","title":"update","text":"<pre><code>update(config: ConfigData) -&gt; ConfigTable\n</code></pre> <p>Atualiza uma configura\u00e7\u00e3o j\u00e1 existente, uma exception pode ser lan\u00e7ada  caso o DB n\u00e3o aceite algum parametro enviado.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ConfigData</code> <p>Um objeto de configura\u00e7\u00e3o para atualiza\u00e7\u00e3o de uma config existente.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; c = ConfigDB()\n&gt;&gt;&gt; c_data = c.get(1)\n&gt;&gt;&gt; c_data.value = '2'\n&gt;&gt;&gt; c.update(c_data)\nConfigTable\n</code></pre>"},{"location":"models/sector/sector/","title":"Class Sector","text":""},{"location":"models/sector/sector/#helpdesk.models.Sector.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; Dict\n</code></pre> <p>Retorna uma representa\u00e7\u00e3o do setor em forma de dicionario.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sector = Sector.get_sector(1)\n&gt;&gt;&gt; sector.to_dict()\n{\n    \"id\": 1,\n    \"name\": \"RH\",\n    \"situation\": \"A\"\n}\n</code></pre>"},{"location":"models/sector/sector_db/","title":"Class SectorDB","text":"<p>Classe para lidar com atividades relacionadas ao setor.</p>"},{"location":"models/sector/sector_db/#helpdesk.models.sector.SectorDB.__upsave_sector_db","title":"__upsave_sector_db","text":"<pre><code>__upsave_sector_db(sector: SectorTable) -&gt; int\n</code></pre> <p>Grava o setor e/ou  atualiza ele no banco de dados. Lan\u00e7a uma Exception  caso n\u00e3o consiga realizar a grava\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>sector</code> <code>Sector</code> <p>Uma instancia do ORM SectorTable para cadastro/atualiza\u00e7\u00e3o do setor</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; s_reg = SectorTable.query.get(1)\n&gt;&gt;&gt; s_reg.nome = 'Recursos Humanos'\n&gt;&gt;&gt; s = SectorDB()\n&gt;&gt;&gt; s.__upsave_sector_db(s_reg)\n1\n</code></pre>"},{"location":"models/sector/sector_db/#helpdesk.models.sector.SectorDB.delete","title":"delete","text":"<pre><code>delete(id: int)\n</code></pre> <p>Exclui o setor no sistema, caso n\u00e3o seja poss\u00edvel lan\u00e7a uma Exception. </p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O identificador do setor</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; SectorDB().delete(1)\n</code></pre>"},{"location":"models/sector/sector_db/#helpdesk.models.sector.SectorDB.get_all_rows","title":"get_all_rows","text":"<pre><code>get_all_rows() -&gt; List[SectorTable]\n</code></pre> <p>Retorna a lista ORM com todos os registros dos setores cadastrados no sistema</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SectorDB().get_all_rows()\n[SectorTable, SectorTable ]\n</code></pre>"},{"location":"models/sector/sector_db/#helpdesk.models.sector.SectorDB.get_all_with_sector","title":"get_all_with_sector","text":"<pre><code>get_all_with_sector() -&gt; List[Sector]\n</code></pre> <p>Retorna a lista de Sector, com todos os setores do sistema j\u00e1 instanciados como Sector</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SectorDB().get_all_with_sector()\n[Sector, Sector ]\n</code></pre>"},{"location":"models/sector/sector_db/#helpdesk.models.sector.SectorDB.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(id: int) -&gt; SectorTable\n</code></pre> <p>Retorna o registro que representa o setor no bd.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O identificador do setor no banco</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; SectorDB().get_by_id(1)\nSectorTable\n</code></pre>"},{"location":"models/sector/sector_db/#helpdesk.models.sector.SectorDB.save","title":"save","text":"<pre><code>save(sector: Sector) -&gt; int\n</code></pre> <p>Salva o setor no banco de dados do sistema e retorna o seu id.</p> <p>Parameters:</p> Name Type Description Default <code>sector</code> <code>Sector</code> <p>Uma instancia de um Sector</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; sector = Sector('TI','A')\n&gt;&gt;&gt; s_db = SectorDB().save(sector)\n1\n</code></pre>"},{"location":"models/sector/sector_db/#helpdesk.models.sector.SectorDB.sector_exists","title":"sector_exists","text":"<pre><code>sector_exists(id: int) -&gt; bool\n</code></pre> <p>Verifica se o setor existe no banco de dados </p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O identificador do setor no banco de dados</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; SectorDB().sector_exists(1)\nTrue\n</code></pre>"},{"location":"models/sector/sector_db/#helpdesk.models.sector.SectorDB.update","title":"update","text":"<pre><code>update(sector: Sector)\n</code></pre> <p>Atualiza o setor atual no banco de dados.</p> <p>Parameters:</p> Name Type Description Default <code>sector</code> <code>Sector</code> <p>Uma instancia do sector</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; sector = Sector(1, 'TI', 'B')\n&gt;&gt;&gt; s_db = SectorDB().update(sector)\n</code></pre>"},{"location":"models/user/user/","title":"Class User","text":"<p>             Bases: <code>UserMixin</code></p> <p>Usu\u00e1rio autenticado e o atual usu\u00e1rio logado no sistema.</p>"},{"location":"models/user/user/#helpdesk.models.User.__init_user","title":"__init_user","text":"<pre><code>__init_user(user: UserTable)\n</code></pre> <p>Instancia um usuario no sistema.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>O registro do banco de dados de um usu\u00e1rio.</p> required"},{"location":"models/user/user/#helpdesk.models.User.is_agent","title":"is_agent","text":"<pre><code>is_agent()\n</code></pre> <p>Verifica se o usuario \u00e9 um agente ou nao.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; u = User(1)\n&gt;&gt;&gt; u.is_agent()\nTrue\n</code></pre>"},{"location":"models/user/user/#helpdesk.models.User.is_my_password","title":"is_my_password","text":"<pre><code>is_my_password(password: str) -&gt; bool\n</code></pre> <p>Verifica se o password enviado \u00e9 realmente do usu\u00e1rio.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Uma string que representa a senha do usu\u00e1rio</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; u = User(1)\n&gt;&gt;&gt; u.is_my_password('123')\nFalse\n</code></pre>"},{"location":"models/user/user/#helpdesk.models.User.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; Dict\n</code></pre> <p>Retorna uma representa\u00e7\u00e3o em forma de dicionario do usu\u00e1rio </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; user = User(1)\n&gt;&gt;&gt; user.to_dict()\n{\n    \"agent\": true,\n    \"avatar\": null,\n    \"email\": \"admin@helpdesk.com\",\n    \"id\": \"1\",\n    \"last_login\": \"2023-12-13 20:56:29\",\n    \"name\": \"Admin\",\n    \"sector\": \"TI\"\n}\n</code></pre>"},{"location":"models/user/user_auth/","title":"Class UserAuth","text":"<p>Classe usada para autenticar usu\u00e1rios e manter usuarios</p>"},{"location":"models/user/user_auth/#helpdesk.models.user.UserAuth.login","title":"login","text":"<pre><code>login(email: str, password: str) -&gt; User | None\n</code></pre> <p>Valida se o usu\u00e1rio \u00e9 autenticado, retornando uma instancia  de User ou None, caso ele n\u00e3o esteja ativo.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>O email para login do usu\u00e1rio a plataforma.</p> required <code>password</code> <code>str</code> <p>A senha para login do usu\u00e1rio a plataforma.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; UserAuth().login('fulano@gmail.com', '123')\nUser\n</code></pre>"},{"location":"models/user/user_auth/#helpdesk.models.user.UserAuth.logout","title":"logout","text":"<pre><code>logout()\n</code></pre> <p>Realiza o logout do usuario, limpando sua autentica\u00e7\u00e3o do servidor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; UserAuth().logout()\n</code></pre>"},{"location":"models/user/user_db/","title":"Class UserDB","text":"<p>Manipula\u00e7\u00e3o de usu\u00e1rios no banco de dados</p>"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.__set_attr_user","title":"__set_attr_user","text":"<pre><code>__set_attr_user(user_db: UserTable, name: str, email: str, password: str, agent: str, active: str, id_sector: int) -&gt; UserTable\n</code></pre> <p>Recebe o usu\u00e1rio, ativa todos os seus atributos e o retorna.</p> <p>Parameters:</p> Name Type Description Default <code>user_db</code> <code>User</code> <p>Um objeto de model da representa\u00e7\u00e3o no banco do usu\u00e1rio.</p> required <code>name</code> <code>str</code> <p>O nome do usuario</p> required <code>email</code> <code>str</code> <p>O email do usuario</p> required <code>password</code> <code>str</code> <p>A senha do usuario</p> required <code>agent</code> <code>str</code> <p>Determina se ele \u00e9 agente ou nao (S OU N)</p> required <code>active</code> <code>str</code> <p>Determina se ele esta ativo ou nao (S OU N)</p> required <code>id_sector</code> <code>int</code> <p>Determina qual o setor do usuario criado.</p> required"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.__up_insert_user","title":"__up_insert_user","text":"<pre><code>__up_insert_user(user_db: UserTable) -&gt; UserTable\n</code></pre> <p>Salva ou atualiza o usu\u00e1rio no banco de dados. Este c\u00f3digo  pode lan\u00e7ar uma Exception caso n\u00e3o consiga interagir corretamente  com o banco de dados.</p> <p>Parameters:</p> Name Type Description Default <code>user_db</code> <code>User</code> <p>Um objeto de model da representa\u00e7\u00e3o no banco do usu\u00e1rio.</p> required"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.create_user","title":"create_user","text":"<pre><code>create_user(name: str, email: str, password: str, agent: str, active: str, id_sector: int) -&gt; User\n</code></pre> <p>Cria um novo usuario no sistema e o retorna como User</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>O nome do usuario</p> required <code>email</code> <code>str</code> <p>O email do usuario</p> required <code>password</code> <code>str</code> <p>A senha do usuario</p> required <code>agent</code> <code>str</code> <p>Determina se ele \u00e9 agente ou nao (S OU N)</p> required <code>active</code> <code>str</code> <p>Determina se ele esta ativo ou nao (S OU N)</p> required <code>id_sector</code> <code>int</code> <p>Determina qual o setor do usuario criado</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; u_db = UserDB()\n&gt;&gt;&gt; u_db.create_user('FULANO', 'fulano@gmail.com', '123', 'N', 'S', 1)\nUser\n</code></pre>"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.delete_user","title":"delete_user","text":"<pre><code>delete_user(id: int)\n</code></pre> <p>Exclui o usuario do banco de dados, caso n\u00e3o consiga exclu\u00ed-lo  uma Exception \u00e9 lan\u00e7ada.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O id do usuario a ser excluido</p> required"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.get_all_rows","title":"get_all_rows","text":"<pre><code>get_all_rows() -&gt; List[UserTable]\n</code></pre> <p>Retorna uma lista de usuarios cadastrados no sistema.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; u_db = UserDB()\n&gt;&gt;&gt; u_db.get_all_rows()\n[UserTable, UserTable]\n</code></pre>"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.get_all_with_user","title":"get_all_with_user","text":"<pre><code>get_all_with_user() -&gt; List[User]\n</code></pre> <p>Retorna a lista de usuarios instanciados como Users do sistema.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; u_db = UserDB()\n&gt;&gt;&gt; u_db.get_all_with_user()\n[User, User]\n</code></pre>"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.get_by_email","title":"get_by_email","text":"<pre><code>get_by_email(email: str) -&gt; UserTable\n</code></pre> <p>Retorna o registro que representa o usuario no db. Caso n\u00e3o exista ele lan\u00e7a uma Exception.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Email do usu\u00e1rio a ser retornado</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; u_db = UserDB()\n&gt;&gt;&gt; u_db.get_by_email('fulano@gmail.com')\nUser\n</code></pre>"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(id: int) -&gt; UserTable\n</code></pre> <p>Retorna o registro que representa o usuario no db. Caso n\u00e3o exista ele lan\u00e7a uma Exception.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Identificador do usu\u00e1rio a ser retornado</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; u_db = UserDB()\n&gt;&gt;&gt; u_db.get_by_id(1)\nUser\n</code></pre>"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.register_last_login","title":"register_last_login","text":"<pre><code>register_last_login(id: int) -&gt; UserTable\n</code></pre> <p>Registra o ultimo acesso do usu\u00e1rio no sistema (data atual). Caso o usu\u00e1rio n\u00e3o exista uma Exception ser\u00e1 lan\u00e7ada.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O id que identifica o usuario</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; u_db = UserDB()\n&gt;&gt;&gt; u_db.regiter_last_login(1)\nUserTable\n</code></pre>"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.set_agent","title":"set_agent","text":"<pre><code>set_agent(id: int, agent: bool)\n</code></pre> <p>Atualiza o status do usu\u00e1rio para agente ou n\u00e3o.  Uma exception pode ser lan\u00e7ada  caso o usu\u00e1rio n\u00e3o exista ou algum erro aconte\u00e7a no banco.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O id do usuario a ser alterado para gerente</p> required <code>agent</code> <code>bool</code> <p>Um booleano que determina se o usuario ser\u00e1 ou n\u00e3o agente.</p> required"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.set_avatar","title":"set_avatar","text":"<pre><code>set_avatar(id: int, avatar: str)\n</code></pre> <p>Atualiza a foto do usuario. Uma exception pode  ser lan\u00e7ada caso o usu\u00e1rio n\u00e3o exista ou algum erro no banco.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O id do usuario a ter a foto alterada</p> required <code>avatar</code> <code>str</code> <p>O nome do arquivo que representa o avatar do usuario</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; u_db = UserDB()\n&gt;&gt;&gt; u_db.set_avatar(1, 'foto.png')\n</code></pre>"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.set_name","title":"set_name","text":"<pre><code>set_name(id: int, name: str)\n</code></pre> <p>Realiza a atualiza\u00e7\u00e3o do nome do usu\u00e1rio. Uma Exception  pode ser lan\u00e7ada caso o usu\u00e1rio n\u00e3o exista ou algum erro no banco.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O id do usuario a ter o nome alterado.</p> required <code>name</code> <code>str</code> <p>Uma string que represente o nome do usuario</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; u_db = UserDB()\n&gt;&gt;&gt; u_db.set_name(1, 'Fula')\n</code></pre>"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.set_password","title":"set_password","text":"<pre><code>set_password(id: int, password: str)\n</code></pre> <p>Realiza a atualiza\u00e7\u00e3o da senha do usuario. Uma Exception  pode ser lan\u00e7ada caso o usuario nao exista ou aconte\u00e7a algum erro no banco no momento de atualizar a senha.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O id do usu\u00e1rio a ser autenticado</p> required <code>password</code> <code>str</code> <p>A senha do usuario a ser atualizada</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; u_db = UserDB()\n&gt;&gt;&gt; u_db.set_password(1, '1232')\n</code></pre>"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.update_user","title":"update_user","text":"<pre><code>update_user(id: int, name: str, email: str, agent: str, active: str, id_sector: int) -&gt; User\n</code></pre> <p>Atualiza um usuario no sistema e o retorna.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O id do usuario a ser atualizado</p> required <code>name</code> <code>str</code> <p>O nome do usuario</p> required <code>email</code> <code>str</code> <p>O email do usuario</p> required <code>agent</code> <code>str</code> <p>Determina se ele \u00e9 agente ou nao (S OU N)</p> required <code>active</code> <code>str</code> <p>Determina se ele esta ativo ou nao (S OU N)</p> required <code>id_sector</code> <code>int</code> <p>Determina qual o setor do usuario criado</p> required"},{"location":"models/user/user_db/#helpdesk.models.user.UserDB.user_exists","title":"user_exists","text":"<pre><code>user_exists(id: int) -&gt; bool\n</code></pre> <p>Verifica se o usuario existe no sistema pelo seu ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O identificador do usu\u00e1rio a ser validado</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; u_db = UserDB()\n&gt;&gt;&gt; u_db.user_exists(1)\nTrue\n</code></pre>"}]}